<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>😶‍🌫️ Notes</title>
      <link>https://kisgp.cn</link>
      <description>最近的10条笔记 on 😶‍🌫️ Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>TS 笔记</title>
    <link>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TypeScript/TS%E7%AC%94%E8%AE%B0</link>
    <guid>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TypeScript/TS%E7%AC%94%E8%AE%B0</guid>
    <description>never类型使用 实现一个判断方法类型的函数 type Method = &quot;GET&quot; | &quot;POST&quot; function judgeMethod(method: Method) { if (method === &quot;GET&quot;) { method // 此处 ts 会类型收缩为 &quot;GET&quot; ...</description>
    <pubDate>Thu, 30 Jan 2025 09:43:20 GMT</pubDate>
  </item><item>
    <title>常用工具函数</title>
    <link>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/utils</link>
    <guid>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/utils</guid>
    <description>transformBytes /** * @description 根据字节大小转换为相应的单位 * @param bytes 字节大小 * @returns 转换后的字符串 * @example transformBytes(1024) =&gt; &quot;1 KB&quot; * @example transformBytes(1024 ...</description>
    <pubDate>Tue, 21 Jan 2025 06:44:35 GMT</pubDate>
  </item><item>
    <title>Promise和Async</title>
    <link>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/Promise%E5%92%8CAsync</link>
    <guid>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/Promise%E5%92%8CAsync</guid>
    <description>什么是 Promise Promise 的概念在 JavaScript 中正式被引入是在 ES6（ECMAScript 2015） 标准中。 Promise 是 JavaScript 中用于处理异步操作的核心工具之一。它提供了一种更加优雅和可控的方式来管理异步任务，避免了传统回调函数的复杂性（即回调地狱）和可读性问题。通常用于处理网络请求、数据库操作、文件操作等。 ...</description>
    <pubDate>Fri, 17 Jan 2025 09:53:43 GMT</pubDate>
  </item><item>
    <title>Express实现用户认证</title>
    <link>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Node/Express%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81</link>
    <guid>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Node/Express%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81</guid>
    <description>Session 认证 认证过程 客户端初次请求：服务器生成一个唯一的会话 ID。会话 ID 被存储在服务端的会话存储中，同时通过 HTTP 响应发送到客户端，通常保存在 Cookie 中。 客户端后续请求：客户端在每次请求中都会通过 Cookie 携带会话 ID。服务器从请求中提取会话 ID，根据该 ID 从会话存储中加载会话数据。 ...</description>
    <pubDate>Wed, 15 Jan 2025 06:35:06 GMT</pubDate>
  </item><item>
    <title>事件循环(Event Loop)</title>
    <link>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF</link>
    <guid>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF</guid>
    <description>JavaScript 是单线程 在浏览器中打开一个 Tab 页时，其实就是创建了一个进程，一个进程中可以有多个线程，比如渲染线程、JS 引擎线程、HTTP 请求线程等等。当发起一个请求时，其实就是创建了一个线程，当请求结束后，该线程可能就会被销毁。 JavaScript 引擎一次只能执行一个任务（比如执行一个函数），它不能在同一时刻处理多个任务或进程。这就是为什么它不需要像多线程编程那样涉及到线程同步的问题。尽管 ...</description>
    <pubDate>Tue, 14 Jan 2025 06:46:24 GMT</pubDate>
  </item><item>
    <title>在 Express 中使用 Mongose</title>
    <link>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Node/Mongose%E4%BD%BF%E7%94%A8</link>
    <guid>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Node/Mongose%E4%BD%BF%E7%94%A8</guid>
    <description>参考：mongoosejs.net/ 安装 Mongose npm install mongoose 定义 Model // users.model.ts import mongoose from &#039;mongoose&#039;; import bcrypt from &#039;bcryptjs&#039;; interface ...</description>
    <pubDate>Mon, 13 Jan 2025 17:45:35 GMT</pubDate>
  </item><item>
    <title>复合类型</title>
    <link>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/Rust%E8%AE%A4%E8%AF%86/6_%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B</link>
    <guid>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/Rust%E8%AE%A4%E8%AF%86/6_%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B</guid>
    <description>字符串 字符串是由字符组成的连续集合。 在 Rust 中，字符类型即 char 用 Unicode 表示，因此每个字符占据 4 个字节内存空间。而字符串则是使用 UTF-8 进行编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)，这样有助于大幅降低字符串所占用的内存空间。 在 UTF-8 编码中，英文字符通常只占 1 字节，汉字通常占 ...</description>
    <pubDate>Sun, 12 Jan 2025 17:19:40 GMT</pubDate>
  </item><item>
    <title>所有权和借用</title>
    <link>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/Rust%E8%AE%A4%E8%AF%86/5_%E6%89%80%E6%9C%89%E6%9D%83%E5%92%8C%E5%80%9F%E7%94%A8</link>
    <guid>https://kisgp.cn/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/Rust%E8%AE%A4%E8%AF%86/5_%E6%89%80%E6%9C%89%E6%9D%83%E5%92%8C%E5%80%9F%E7%94%A8</guid>
    <description>所有权 所有权的规则： Rust 中每一个值都被一个变量所拥有，该变量被称为值的所有者。 一个值同时只能被一个变量所拥有，或者说一个值只能拥有一个所有者。 当所有者（变量）离开作用域范围时，这个值将被丢弃(drop)。 转移所有权 let x = 5; let y = x; 这段代码并没有发生所有权的转移。代码首先将 5 绑定到变量 ...</description>
    <pubDate>Sun, 12 Jan 2025 17:18:08 GMT</pubDate>
  </item><item>
    <title>RefactoringUI学习</title>
    <link>https://kisgp.cn/%E5%89%8D%E7%AB%AF/UI%E8%AE%BE%E8%AE%A1/RefactoringUI%E5%AD%A6%E4%B9%A0</link>
    <guid>https://kisgp.cn/%E5%89%8D%E7%AB%AF/UI%E8%AE%BE%E8%AE%A1/RefactoringUI%E5%AD%A6%E4%B9%A0</guid>
    <description>RefactoringUI.</description>
    <pubDate>Sun, 12 Jan 2025 08:35:37 GMT</pubDate>
  </item><item>
    <title> 其他文件</title>
    <link>https://kisgp.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/8_%E5%85%B6%E4%BB%96</link>
    <guid>https://kisgp.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/8_%E5%85%B6%E4%BB%96</guid>
    <description> 2025王道计算机组成原理（带书签） 大题总结_存储系统 大题总结_数据的表示和运算 大题总结_一条指令的硬件实现 大题总结_一堆指令的执行 计组+操作系统存储系统串讲 .</description>
    <pubDate>Sun, 12 Jan 2025 08:15:49 GMT</pubDate>
  </item>
    </channel>
  </rss>